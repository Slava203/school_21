void fprime(char *str)
{
    int n = atoi(str);;
    int i = 2;
    
    if (n == 1)
    {
        printf("1");
        return ;
    }
    else
    {
        while (n >= i)
        {
            if (n % i == 0)
            {
                printf("%d", i);
                if (n != i)
                    printf("*");
                n  = n / i;
                i--;
            }
            i++;
        }
    }
}

int main(int argc, char **argv)
{
    if (argc == 2)
        fprime(argv[1]);
    printf("\n");
    return 0;
}
——————————————————————————————————————————————————————
#include <stdio.h>
#include <stdlib.h>

typedef struct    s_list
{
    struct s_list *next;
    void          *data;
} t_list;

t_list	*ft_create_elem(void *data)
{
	t_list *elem;

	if (!(elem = malloc(sizeof(t_list))))
		return (NULL);
	elem->data = data;
	elem->next = NULL;
	return (elem);
}

void    ft_list_foreach(t_list *begin_list, void (*f)(void *))
{
    t_list *list;
    
    if (!begin_list)
        return ;
    list = begin_list;
    while (list->next)
    {
        (*f)(list->data);
        list = list->next;
    }
}

int main(int argc, char **argv)
{
    t_list *tmp;
    
    tmp = ft_create_elem("First element");
    tmp->next = ft_create_elem("Second element");
    tmp->next->next = ft_create_elem("Theard element");
    
    ft_list_foreach(tmp, &printf);
    
}
—————————————————————————————————————————————————————-
#include <stdio.h>
#include <stdlib.h>

int ft_is_space(char c)
{
    return (c == ' ' || c == '\t' || c == '\n');
}

int ft_word_count(char *str)
{
    int i;
    int count = 0;
    
    i = 0;
    while (str[i])
    {
        if (!ft_is_space(str[i]) && (str[i + 1] == '\0' || ft_is_space(str[i + 1])))
            count++;
        i++;
    }
    return (count);
}

char *ft_new_word(char *str)
{
    int i;
    int len;
    char *ptr;
    
    i = 0;
    len  = 0;
    while (!ft_is_space(str[len]))
        len++;
    if (!(ptr = (char*)malloc(sizeof(char) * (len + 1))))
        return (NULL);
    while (!ft_is_space(str[i]))
    {
        ptr[i] = str[i];
        i++;
    }
    ptr[i] = '\0';
    return (ptr);
}

char    **ft_split(char *str)
{
    int i = 0;
    int word_count = ft_word_count(str);
    char **mas;
    
    while (ft_is_space(*str))
        str++;
    if (!(mas = (char**)malloc(sizeof(char*) * (word_count + 1))))
        return (NULL);
    while (i < word_count)
    {
        if (!(mas[i] = ft_new_word(str)))
            return (NULL);
        while (!ft_is_space(*str))
            str++;
        while (ft_is_space(*str))
            str++;
        i++;
    }
    mas[i] = NULL;
    return (mas);
}

int main(int argc, char **argv)
{
    char str[] = "        Slava   is  a cool  guy  y";
    int i = 0;
    char **mas;
    
    mas = ft_split(str);
    while (mas[i] != NULL)
    {
        printf("%s\n", mas[i]);
        i++;
    }
    //printf("%s", ft_new_word(str));
}————————————————————————————————————————————————————-
#include <stdio.h>
#include <stdlib.h>

typedef struct    s_list
{
    struct s_list   *next;
    void             *data;
} t_list;

t_list	*ft_create_elem(void *data)
{
	t_list *elem;

	if (!(elem = malloc(sizeof(t_list))))
		return (NULL);
	elem->data = data;
	elem->next = NULL;
	return (elem);
}

int ascending(int a, int b)
{
	return (a <= b);
}

t_list	*sort_list(t_list* lst, int (*cmp)(int, int))
{
    t_list *ptr;
    t_list *ptr2;
    void *data;

    ptr = lst;
    while (ptr)
    {
        ptr2 = lst;
        while (ptr2 && ptr2->next)
        {
            if ((*cmp)(ptr2->data, ptr2->next->data) == 0)
            {
                data = ptr2->next->data;
                ptr2->next->data = ptr2->data;
                ptr2->data = data;
            }
            ptr2 = ptr2->next;
        }
        ptr = ptr->next;
    }
    
    return (lst);
}

int main()
{
    t_list *tmp;
    t_list *sort;
    
    tmp = ft_create_elem(2);
    tmp->next = ft_create_elem(3);
    tmp->next->next = ft_create_elem(4);
    tmp->next->next->next = ft_create_elem(1);
    
    sort = sort_list(tmp, &ascending);

    while (sort)
    {
        printf("%d ", sort->data);
        sort = sort->next;   
    }
    return 0;
}
——————————————————————————————————————————————————————
#include <stdio.h>
#include <stdlib.h>

void sort_int_tab(int *mas, unsigned int size)
{
    int i = 0;
    int j;
    int tmp;
    
    while (i < size)
    {
        j = 0;
        while (j < size - 1)
        {
            if (mas[j] > mas[j + 1])
            {
                tmp = mas[j];
                mas[j] = mas[j + 1];
                mas[j + 1] = tmp;
            }
            j++;
        }
        i++;
    }
}

int main()
{
    int *mas;
    int i = 0;
    
    if (!(mas = (int*)malloc(sizeof(int) * 5)))
        printf("DGOPA");
    mas[0] = 5;
    mas[1] = 1;
    mas[2] = 3;
    mas[3] = 2;
    mas[4] = 4;
    
    sort_int_tab(mas, 5);
    while (i < 5)
    {
        printf("%d ", mas[i]);
        i++;
    }
    return 0;
}
——————————————————————————————————————————————————————
int ft_n_size(int n)
{
    int size = 0;
    unsigned int nn;
    
    nn = n;
    if (n < 0)
    {
        nn = -n;
        size++;
    }
    while (nn / 10)
    {
        nn /= 10;
        size++;
    }
    return (size + 1);
}

char	*ft_itoa(int n)
{
    int size = ft_n_size(n);
    unsigned int nn;
    char *ptr;
    
    if (!(ptr = (char*)malloc(sizeof(char) * (size + 1))))
        return (NULL);
    ptr[size] = '\0';
    if (n == 0)
    {
        ptr[0] = '0';
        return (ptr);
    }
    size--;
    nn = n;
    if (n < 0)
    {
        nn = -n;
        ptr[0] = '-';
    }
    while (nn > 0)
    {
        ptr[size] = nn % 10 + '0';
        nn /= 10;
        size--;
    }
    return (ptr);
}

int main()
{
    int n = 12;
    
    printf("%s", ft_itoa(n));
    return 0;
}
——————————————————————————————————————————————————————
#include <stdio.h>
#include <unistd.h>

int ft_is_space(char c)
{
    return (c == ' ' || c == '\t');
}

int space_swap(char *str, int i)
{
    while (ft_is_space(str[i]) && str[i])
        i++;
    return (i);
}

void rostring(char *str)
{
    int i;
    
    i = space_swap(str, 0);
    while (!ft_is_space(str[i]) && str[i])
        i++;
    i = space_swap(str, i);
    while (str[i])
    {
        if (ft_is_space(str[i]))
        {
            i = space_swap(str, i);
            write (1, " ", 1);
        }
        else 
        {
            write (1, &str[i], 1);
            i++;
        }
    }
    if (str[i] != '\0')
        write (1, " ", 1);
    i = space_swap(str, 0);
    while (!ft_is_space(str[i]) && str[i])
    {
        write(1, &str[i], 1);
        i++;
    }
}

int main(int argc, char **argv)
{
    if (argc == 2)
        rostring(argv[1]);
    write (1, "\n", 1);

    return 0;
}
——————————————————————————————————————————————————————
int brack(char *str, int i)
{
    int count = 0;
    int dir;
    
    if (str[i] == '[')
        dir = 1;
    else if (str[i] == ']')
        dir = -1;
    while (str[i])
    {
        if (str[i] == '[')
            count++;
        else if (str[i] == ']')
            count--;
        if ((str[i] == '[' || str[i] == ']') && count == 0)
            return (i);
        i += dir;
    }
    return (0);
}

void brainfuck(char *str)
{
    char *ptr;
    int i_ptr = 0;
    int i_str = 0;
    
    if (!(ptr = (char*)malloc(sizeof(char) * 2048)))
        return ;
    while (str[i_str])
    {
        if (str[i_str] == '>')
            i_ptr++;
        else if (str[i_str] == '<')
            i_ptr--;
        else if (str[i_str] == '+')
            ptr[i_ptr]++;  
        else if (str[i_str] == '-')
            ptr[i_ptr]--;
        else if (str[i_str] == '.')
            write (1, &ptr[i_ptr], 1);
        else if ((str[i_str] == '[' && !ptr[i_ptr]) || (str[i_str] == ']' && ptr[i_ptr]))
            i_str = brack(*str, i_str);
        i_str++;
    }
}

int main(int argc, char **argv)
{
    if (argc == 2)
        brainfuck(argv[1]);
    write (1, "\n", 1);
    return 0;
}
——————————————————————————————————————————————————————
#include <stdio.h>
#include <unistd.h>

int brack(char *str, int i)
{
    int count = 0;
    int dir;
    
    if (str[i] == '[')
        dir = 1;
    else if (str[i] == ']')
        dir = -1;
    while (str[i])
    {
        if (str[i] == '[')
            count++;
        else if (str[i] == ']')
            count--;
        if ((str[i] == '[' || str[i] == ']') && count == 0)
            return (i);
        i += dir;
    }
    return (0);
}

void brainfuck(char *str)
{
    char *ptr;
    int i_ptr = 0;
    int i_str = 0;
    
    if (!(ptr = (char*)malloc(sizeof(char) * 2048)))
        return ;
    while (str[i_str])
    {
        if (str[i_str] == '>')
            i_ptr++;
        else if (str[i_str] == '<')
            i_ptr--;
        else if (str[i_str] == '+')
            ptr[i_ptr]++;  
        else if (str[i_str] == '-')
            ptr[i_ptr]--;
        else if (str[i_str] == '.')
            write (1, &ptr[i_ptr], 1);
        else if ((str[i_str] == '[' && !ptr[i_ptr]) || (str[i_str] == ']' && ptr[i_ptr]))
            i_str = brack(str, i_str);
        i_str++;
    }
    free(ptr);
}

int main(int argc, char **argv)
{
    if (argc == 2)
        brainfuck(argv[1]);
    write (1, "\n", 1);
    return 0;
}
——————————————————————————————————————————————————————
——————————————————————————————————————————————————————
——————————————————————————————————————————————————————
——————————————————————————————————————————————————————
——————————————————————————————————————————————————————
——————————————————————————————————————————————————————